(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{355:function(a,t,s){"use strict";s.r(t);var e=s(25),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis-缓存详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-缓存详解"}},[a._v("#")]),a._v(" MyBatis 缓存详解")]),a._v(" "),s("p",[a._v("参考文档："),s("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("MyBatis官方文档"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("MyBatis的缓存主要分为两种一级缓存也叫本地缓存（local cache）和二级缓存（second level cache）。")]),a._v(" "),s("h3",{attrs:{id:"一级缓存、本地缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一级缓存、本地缓存"}},[a._v("#")]),a._v(" 一级缓存、本地缓存")]),a._v(" "),s("p",[s("em",[a._v("一级缓存是session级缓存，即缓存只在session范围生效。")])]),a._v(" "),s("p",[a._v("每当一个新 session 被创建，MyBatis 就会创建一个与之相关联的本地缓存。任何在 session 执行过的查询语句本身都会被保存在本地缓存中，那么，相同的查询语句和相同的参数所产生的更改就不会二度影响数据库了。本地缓存会被增删改、提交事务、关闭事务以及关闭 session 所清空。")]),a._v(" "),s("p",[a._v("默认情况下，本地缓存数据可在整个 session 的周期内使用，这一缓存需要被用来解决循环引用错误和加快重复嵌套查询的速度，所以它不可以被禁用掉，但是你可以设置 localCacheScope=STATEMENT 表示缓存仅在语句执行时有效。")]),a._v(" "),s("p",[a._v("注意，如果 localCacheScope 被设置为 SESSION，那么 MyBatis 所返回的引用将传递给保存在本地缓存里的相同对象。对返回的对象（例如 list）做出任何更新将会影响本地缓存的内容，进而影响存活在 session 生命周期中的缓存所返回的值。因此，不要对 MyBatis 所返回的对象作出更改，以防后患。")]),a._v(" "),s("p",[a._v("手动清空本地缓存：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("clearCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"二级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二级缓存"}},[a._v("#")]),a._v(" 二级缓存")]),a._v(" "),s("p",[s("em",[a._v("二级缓存是namespace级缓存，二级缓存会在同一 namespace中生效。")])]),a._v(" "),s("p",[a._v("默认情况下，MyBatis 3 没有开启二级缓存，要开启二级缓存,你需要在你的 SQL 映射文件（mapper.xml）中添加一行:")]),a._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("em",[a._v("其实还需要在配置文件中把"),s("code",[a._v("mybatis.configuration.cache-enabled")]),a._v("设置为true(默认为true)，若添加"),s("code",[a._v("<cache/>")]),a._v("标签后缓存不生效，可以检查是否将其设置为了false")])]),a._v(" "),s("p",[a._v("字面上看就是这样。这个简单语句的效果如下:")]),a._v(" "),s("ul",[s("li",[a._v("映射语句文件中的所有 select 语句将会被缓存。")]),a._v(" "),s("li",[a._v("映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。")]),a._v(" "),s("li",[a._v("缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。")]),a._v(" "),s("li",[a._v("根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。")]),a._v(" "),s("li",[a._v("缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。")]),a._v(" "),s("li",[a._v("缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。")])]),a._v(" "),s("p",[a._v("所有的这些属性都可以通过缓存元素的属性来修改。比如:")]),a._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("cache")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("eviction")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("FIFO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("flushInterval")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("60000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("size")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("512"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("readOnly")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("true"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("这个更高级的配置创建了一个 FIFO 缓存，并每隔 60 秒刷新，存数结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此在不同线程中的调用者之间修改它们会 导致冲突。")]),a._v(" "),s("p",[a._v("可用的收回策略有:")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("LRU")]),a._v(" – 最近最少使用的:移除最长时间不被使用的对象。")]),a._v(" "),s("li",[s("code",[a._v("FIFO")]),a._v(" – 先进先出:按对象进入缓存的顺序来移除它们。")]),a._v(" "),s("li",[s("code",[a._v("SOFT")]),a._v(" – 软引用:移除基于垃圾回收器状态和软引用规则的对象。")]),a._v(" "),s("li",[s("code",[a._v("WEAK")]),a._v(" – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。")])]),a._v(" "),s("p",[a._v("默认的缓存回收策略是 LRU。")]),a._v(" "),s("p",[a._v("flushInterval(刷新间隔)可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。")]),a._v(" "),s("p",[a._v("size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。")]),a._v(" "),s("p",[a._v("readOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。")]),a._v(" "),s("p",[s("em",[a._v("若在SqlSession关闭时，SqlSession对应的本地缓存会自动转化为二级缓存。")])]),a._v(" "),s("h3",{attrs:{id:"自定义缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义缓存"}},[a._v("#")]),a._v(" 自定义缓存")]),a._v(" "),s("p",[a._v("使用自定缓存，只需要实现MyBatis的Cache接口并在"),s("code",[a._v("<cache/>")]),a._v("中配置缓存类型：")]),a._v(" "),s("div",{staticClass:"language-h't line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<cache type="com.domain.something.MyCustomCache"/>\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("em",[a._v("自定义缓存没有使用过，如果大家有兴趣可以参考"),s("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("MyBatis官方文档"),s("OutboundLink")],1),a._v("自定义缓存部分")])]),a._v(" "),s("h3",{attrs:{id:"后记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[a._v("#")]),a._v(" 后记")]),a._v(" "),s("p",[a._v("这篇文章主要由"),s("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("MyBatis官方文档"),s("OutboundLink")],1),a._v("整理而来，用于记录我的学习过程，作为2019年的开始，以后的学习都需要有产出物，否则学了之后很快就会忘记。")])])}),[],!1,null,null,null);t.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{361:function(n,t,a){"use strict";a.r(t);var i=a(25),e=Object(i.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"spring基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring基础"}},[n._v("#")]),n._v(" Spring基础")]),n._v(" "),a("h2",{attrs:{id:"spring容器annotationconfigapplication的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring容器annotationconfigapplication的创建"}},[n._v("#")]),n._v(" Spring容器AnnotationConfigApplication的创建")]),n._v(" "),a("ul",[a("li",[n._v("使用传入组件的.class文件方式创建")]),n._v(" "),a("li",[n._v("使用传入组件的包名的方式创建")]),n._v(" "),a("li",[n._v('使用Configrition,AnnotationScan("包名")组合注解方式,(可以排除包下不需要创建的类)')])]),n._v(" "),a("h2",{attrs:{id:"bean装配（spring-context-提供）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean装配（spring-context-提供）"}},[n._v("#")]),n._v(" Bean装配（Spring-Context 提供）")]),n._v(" "),a("ul",[a("li",[n._v("使用@Configuration注解 装配配置文件")]),n._v(" "),a("li",[n._v("使用Bean注解 装配Bean")]),n._v(" "),a("li",[n._v("使用Conpommet注解 装配组件")]),n._v(" "),a("li",[n._v("使用Repository注解 装配Dao")]),n._v(" "),a("li",[n._v("使用Service注解 装配 Service")]),n._v(" "),a("li",[n._v("使用Controller注解装配 Controller")])]),n._v(" "),a("h2",{attrs:{id:"bean-依赖注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean-依赖注入"}},[n._v("#")]),n._v(" Bean 依赖注入")]),n._v(" "),a("ul",[a("li",[n._v("使用Autoware 自动注入Bean（Spring-Context 提供）")]),n._v(" "),a("li",[n._v("使用Resource 自动注入Bean（JSR-250,jdk提供，无需引入其他Jar）")]),n._v(" "),a("li",[n._v("使用Inject 自动注入Bean（JSR-330,jdk提供，需引入javax.inject包）")])]),n._v(" "),a("p",[n._v("备注: Spring-Context 包 包含spring-context spring-aop spring-beans spring-core spring-expression commons-logging")])])}),[],!1,null,null,null);t.default=e.exports}}]);